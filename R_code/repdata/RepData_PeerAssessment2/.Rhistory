data.raw <- read.csv(destfn)
names(data.raw)
str(data.raw)
dim(data.raw)
?read.csv
data.raw <- read.csv(destfn, stringsAsFactors=FALSE, strip.white=TRUE, blank.lines.skip=TRUE)
str(data.raw)
library(dplyr)
library(lubridate)
library(ggplot2)
library(dplyr)
stormdata <- tbl_df(data.raw)
rm(data.raw)
stormdata1 <- select(stormdata, STATE, EVTYPE)
stormdata <- select(stormdata, STATE, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP, WFO)
stormdata
factor(stormdata$EVTYPE)
distinct(factor(stormdata$EVTYPE))
unique(factor(stormdata$EVTYPE))
data.raw <- read.csv(destfn, stringsAsFactors=FALSE, strip.white=TRUE, blank.lines.skip=TRUE)
stormdata <- tbl_df(data.raw)
stormdata <- select(stormdata, STATE, BGN_DATE, BGN_TIME, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP, WFO)
storm.health <- select(stormdata, -(CROPDMG:WFO))
storm.health
storm.health <- select(stormdata, -(PROPDMG:WFO))
storm.health
any(is.na(storm.health$FATALITIES))
any(is.na(storm.health$INJURIES))
storm.health <- select(stormdata, -(PROPDMG:WFO)) %>%
filter(FATALITIES==0 & INJURIES==0)
storm.health
storm.health <- select(stormdata, -(PROPDMG:WFO)) %>%
filter(FATALITIES!=0 | INJURIES!=0)
storm.health
storm.health <- filter(storm.health, FATALITIES!=0 | INJURIES!=0 | PROPDMG!=0 | CROPDMG!=0)
stormdata <- filter(stormdata, FATALITIES!=0 | INJURIES!=0 | PROPDMG!=0 | CROPDMG!=0)
nrow(stormdata)
sum("K" in  stormdata$PROPDMGEXP)
sum("K" %in%  stormdata$PROPDMGEXP)
all("K" %in%  stormdata$PROPDMGEXP)
sum(stormdata$PROPDMGEXP=="K")
sum(stormdata$PROPDMGEXP=="k")
sum(stormdata$PROPDMGEXP=="K ")
sum(stormdata$PROPDMGEXP==" K")
sum(stormdata$PROPDMGEXP=="M")
sum(stormdata$PROPDMGEXP=="B")
sum(stormdata$PROPDMGEXP %in% c("K", "M", "B"))
sum(stormdata$PROPDMGEXP not %in% c("K", "M", "B"))
sum(!(stormdata$PROPDMGEXP %in% c("K", "M", "B")))
stormdata1 <- stormdata[!(stormdata$PROPDMGEXP %in% c("K", "M", "B")),]
stormdata1
sum(!(stormdata$PROPDMGEXP %in% c("K", "M", "B")) & stormdata$PROPDMG > 0)
stormdata1 <- stormdata[!(stormdata$PROPDMGEXP %in% c("K", "M", "B"))  & stormdata$PROPDMG > 0,]
stormdata1
factor(stormdata$PROPDMGEXP)
factor(stormdata1$PROPDMGEXP)
tmpdata <- stormdata[!(stormdata$PROPDMGEXP %in% c("K", "M", "B"))  & stormdata$PROPDMG > 0,]
factor(tmpdata)
tmpdata <- stormdata[!(stormdata$PROPDMGEXP %in% c("K", "M", "B"))  & stormdata$PROPDMG > 0,]
factor(tmpdata$PROPDMGEXP)
errcount <- nrow(tmpdata)
errcount
?revalue
exp_KMB <- c("k"="K", "m"="M", "b"="B")
revalue(stormdata$PROPDMGEXP,  exp_KMB)
class(stormdata)
revalue(stormdata$PROPDMGEXP,  exp_KMB)
revalue(stormdata$PROPDMGEXP, exp_KMB)
library(dplyr)
revalue(stormdata$PROPDMGEXP, exp_KMB)
install(plyr)
install.packages(plyr)
install.packages("plyr")
install.packages("plyr")
library(plyr)
library(dplyr)
revalue(stormdata$PROPDMGEXP, exp_KMB)
?mutate
install.packages("plyr")
install.packages("plyr")
library(plyr)
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library(plyr)
exp_KMB <- c("k"="K", "m"="M", "b"="B")
stormdata
class(stormdata)
revalue(stormdata$PROPDMGEXP, exp_KMB)
stormdata$PROPDMGEXP <- revalue(stormdata$PROPDMGEXP, exp_KMB)
tmpdata <- stormdata[!(stormdata$PROPDMGEXP %in% c("K", "M", "B"))  & stormdata$PROPDMG > 0,]
errcount <- nrow(tmpdata)
factor(tmpdata$PROPDMGEXP)
errcount
stormdata$CROPDMGEXP <- revalue(stormdata$CROPDMGEXP, exp_KMB)
?revalue
stormdata$CROPDMGEXP <- revalue(stormdata$CROPDMGEXP, exp_KMB, warn_missing=FALSE)
head(stormdata$PROPDMGEXP[!(stormdata$PROPDMGEXP %in% c("K", "M", "B")) & stormdata$PROPDMG > 0],10)
stormdata$PROPDMGEXP[!(stormdata$PROPDMGEXP %in% c("K", "M", "B")) & stormdata$PROPDMG > 0] <- "K"
tmpdata <- stormdata[!(stormdata$PROPDMGEXP %in% c("K", "M", "B"))  & stormdata$PROPDMG > 0,]
errcount <- nrow(tmpdata)
factor(tmpdata$PROPDMGEXP)
errcount
tmpdata <- stormdata[!(stormdata$CROPDMGEXP %in% c("K", "M", "B"))  & stormdata$CROPDMG > 0,]
factor(tmpdata$PROPDMGEXP)
errcount <- nrow(tmpdata)
errcount
tmpdata$PROPDMGEXP
tmpdata$CROPDMGEXP
stormdata$CROPDMGEXP <- revalue(stormdata$CROPDMGEXP, exp_KMB, warn_missing=FALSE)
stormdata$CROPDMGEXP[!(stormdata$CROPDMGEXP %in% c("K", "M", "B")) & stormdata$CROPDMG > 0] <- "K"
factor(stormdata$CROPDMGEXP)
factor(stormdata$PROPDMGEXP)
head(stormdata)
?ucase
?upper
?toupper
head(stormdata,20)
stormdata$EVTPYE[1:100]
stormdata$EVTPYE[]
stormdata$EVTPYE[,10]
stormdata$EVTPYE[1]
stormdata$EVTYPE[1:100]
stormdata$EVTYPE[100:200]
stormdata$EVTYPE[1000:1200]
stormdata$EVTYPE[10000:101000]
stormdata$EVTYPE[20000:200100]
stormdata$EVTYPE <- toupper(stormdata$EVTYPE)
stormdata$EVTYPE[20000:200100]
?trim
?rtrim
stormdata$EVTYPE <- toupper(stormdata$EVTYPE)
?gsub
stormdata$EVTYPE <- gsub("([ ])", "", stormdata$EVTYPE)
stormdata$EVTYPE[20000:200100]
?revalue
grep("(THUNDERSTORM)", stormdata$EVTYPE)
grep("(THUNDERSTORM)", stormdata$EVTYPE, value=TRUE)
stormdata$EVTYPE <- gsub("(THUNDERSTORM)", "THUNDERSTORM", stormdata$EVTYPE)
grep("(THUNDERSTORM)", stormdata$EVTYPE, value=TRUE)
stormdata$EVTYPE[grep("(THUNDERSTORM)", stormdata$EVTYPE)] <- "THUNDERSTORM"
grep("(THUNDERSTORM)", stormdata$EVTYPE, value=TRUE)
stormdata$EVTYPE[grep("(TSTM)", stormdata$EVTYPE)] <- "THUNDERSTORM"
stormdata$EVTYPE[grep("(TORNADO)", stormdata$EVTYPE)] <- "TORNADO"
grep("(COLD|WINDCHILL)", stormdata$EVTYPE)
grep("(COLD|WINDCHILL)", stormdata$EVTYPE, value=TRUE)
stormdata$EVTYPE[grep("(COLD|WINDCHILL)", stormdata$EVTYPE)] <- "COLD/WINDCHILL"
grep("(COLD|WINDCHILL)", stormdata$EVTYPE, value=TRUE)
stormdata$EVTYPE[grep("(DROUGHT)", stormdata$EVTYPE)] <- "DROUGHT"
grep("(FLASH&FLOOD)", stormdata$EVTYPE)
grep("(FLASH&FLOOD)", stormdata$EVTYPE, value=TRUE)
grep("(FLASH)(FLOOD)", stormdata$EVTYPE, value=TRUE)
grep("(FLASH)&(FLOOD)", stormdata$EVTYPE, value=TRUE)
grep("[(FLASH)(FLOOD)]", stormdata$EVTYPE, value=TRUE)
grep("([(FLASH)(FLOOD)])", stormdata$EVTYPE, value=TRUE)
grep("(FLASH)(FLOOD)", stormdata$EVTYPE, value=TRUE)
grep("(FLOOD)(FLASH)(FLOOD)", stormdata$EVTYPE, value=TRUE)
grep("(FLOOD)(FLASH)", stormdata$EVTYPE, value=TRUE)
grep("(FLOOD).*(FLASH)", stormdata$EVTYPE, value=TRUE)
grep("(FLOOD).*(FLASH)", stormdata$EVTYPE, value=TRUE)
stormdata$EVTYPE[grep("(FLASH).*(FLOOD)", stormdata$EVTYPE)] <- "FLASH/FLOOD"
stormdata$EVTYPE[grep("(FLOOD).*(FLASH)", stormdata$EVTYPE)] <- "FLASH/FLOOD"
grep("(FLOOD)^(FLASH)", stormdata$EVTYPE, value=TRUE)
grep("(FLOOD)[^(FLASH)]", stormdata$EVTYPE, value=TRUE)
stormdata$EVTYPE[grep("(FLOOD)[^(FLASH)]", stormdata$EVTYPE)] <- "FLOOD"
grep("(FLOOD)[^(FLASH)]", stormdata$EVTYPE, value=TRUE)
grep("(FLOOD)", stormdata$EVTYPE, value=TRUE)
grep("(FLOOD)[^(FLASH)]", stormdata$EVTYPE, value=TRUE)
stormdata$EVTYPE[grep("(FROST|FREEZE)", stormdata$EVTYPE)] <- "FROST/FREEZE"
stormdata$EVTYPE[grep("(HEAT)", stormdata$EVTYPE)] <- "HEAT"
stormdata$EVTYPE[grep("(RAIN)", stormdata$EVTYPE)] <- "HEAVYRAIN"
stormdata$EVTYPE[grep("(SNOW)", stormdata$EVTYPE)] <- "HEAVYSNOW"
stormdata$EVTYPE[grep("(HURRICANE|TYPHOON)", stormdata$EVTYPE)] <- "HURRICANE/TYPHOON"
stormdata$EVTYPE[grep("(SURGE|TIDE)", stormdata$EVTYPE)] <- "SURGE/TIDE"
stormdata$EVTYPE[grep("(VOLCANIC)", stormdata$EVTYPE)] <- "VOLCANIC"
fector(stormdata$EVTYPE)
factor(stormdata$EVTYPE)
table(stormdata$EVTYPE)
stormdata$EVTYPE[grep("(FIRE)", stormdata$EVTYPE)] <- "WILDFIRE"
stormdata$EVTYPE[grep("(WINTERWEATHER)", stormdata$EVTYPE)] <- "WINTERWEATHER"
stormdata$EVTYPE[grep("(WINTERSTORM)", stormdata$EVTYPE)] <- "WINTERSTORM"
table(stormdata$EVTYPE)
stormdata$EVTYPE[grep("(HAIL)", stormdata$EVTYPE)] <- "HAIL"
stormdata$EVTYPE[grep("(SURF)", stormdata$EVTYPE)] <- "HIGHSURF"
stormdata$EVTYPE[grep("(STREAMFLOOD)", stormdata$EVTYPE)] <- "FLOOD"
stormdata$EVTYPE[grep("(WATERSPOUT)", stormdata$EVTYPE)] <- "WATERSPOUT"
table(stormdata$EVTYPE)
stormdata$EVTYPE[grep("(RIVERFLOOD)", stormdata$EVTYPE)] <- "FLOOD"
stormdata$EVTYPE[grep("(STRONGWIND)", stormdata$EVTYPE)] <- "STRONGWIND"
table(stormdata$EVTYPE)
stormdata$EVTYPE[grep("(URBANLOOD)", stormdata$EVTYPE)] <- "FLOOD"
table(stormdata$EVTYPE)
stormdata$EVTYPE[grep("(URBANFLOOD)", stormdata$EVTYPE)] <- "FLOOD"
table(stormdata$EVTYPE)
stormdata$EVTYPE[grep("(SMLSTREAMFLD)", stormdata$EVTYPE)] <- "FLOOD"
table(stormdata$EVTYPE)
stormdata$EVTYPE[grep("(URBAN).*(SMALL)", stormdata$EVTYPE)] <- "FLOOD"
table(stormdata$EVTYPE)
stormdata$EVTYPE[grep("(HIGHWIND)", stormdata$EVTYPE)] <- "HIGHWIND"
grep("(^WIND)", stormdata$EVTYPE, value)
grep("^WIND", stormdata$EVTYPE, value)
grep("^WIND", stormdata$EVTYPE, value=TRUE)
table(grep("^WIND", stormdata$EVTYPE, value=TRUE))
table(grep("^WIND", stormdata$EVTYPE, value=TRUE))
factor(stormdata$EVTYPE)
?munutate
?muntate
?munitate
?munipute
?minupute
?ifelse
exp_KMB
value_KMB <- c("K"=1000, "M"=10e+6, "B"=10e+9)
value_KMB
value_KMB <- c("K"=1e+3, "M"=1e+6, "B"=1e+9)
value_KMB
testVec <- revalue(stormdata$PROPDMGEXP, value_KMB, warn_missing=FALSE)
class(testVec)
testVec <- numeric(revalue(stormdata$PROPDMGEXP, value_KMB, warn_missing=FALSE))
testVec <- as.numeric(revalue(stormdata$PROPDMGEXP, value_KMB, warn_missing=FALSE))
class(testVec)
stormdata$PROPDMGEXP <- as.numeric(revalue(stormdata$PROPDMGEXP, value_KMB, warn_missing=FALSE))
class(stormdata$PROPDMGEXP)
stormdata$DROPDMGEXP <- as.numeric(revalue(stormdata$DROPDMGEXP, value_KMB, warn_missing=FALSE))
stormdata$CROPDMGEXP <- as.numeric(revalue(stormdata$DROPDMGEXP, value_KMB, warn_missing=FALSE))
stormdata$CROPDMGEXP <- as.numeric(revalue(stormdata$CROPDMGEXP, value_KMB, warn_missing=FALSE))
stormdata <- mutate(stormdata, PROPDMGVALUE=PROPDMG*PROPDMGEXP)
stormdata <- mutate(stormdata, CROPDMGVALUE=CROPDMG*CROPDMGEXP)
stormdata <- mutate(stormdata, TOTALDMGVALUE=PROPDMGVALUE+CROPDMGVALUE)
?group_by
library(dplyr)
?group_by
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(mean(FATALITIES), sum(FATALITIES), mean(INJURIES), sum(INJURIES), mean(TOTALDMGVALUE), sum(TOTALDMGVALUE))
stormsum[1:10]
stormdata
stormdata[,PROPDMG:]
stormdata[,PROPDMG:TOTALDMGVALUE]
class(stormdata)
select(stormdata, EVTYPE, PROPDMG:TOTALDMGVALUE)
select(stormdata, PROPDMG:TOTALDMGVALUE)
stormdata$CROPDMGVALUE[is.na(stormdata$CROPDMGVALUE)] <- 0
stormdata$PROPDMGVALUE[is.na(stormdata$PROPDMGVALUE)] <- 0
stormdata <- mutate(stormdata, TOTALDMGVALUE=PROPDMGVALUE+CROPDMGVALUE)
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(mean(FATALITIES), sum(FATALITIES), mean(INJURIES), sum(INJURIES), mean(TOTALDMGVALUE), sum(TOTALDMGVALUE))
stormsum[1:10]
stormsum[1:10,6:10]
select(stormdata, PROPDMG:TOTALDMGVALUE)
n_count <- 10
topfatality <- arrage(stormsum, desc(FATALITIES), desc(INJURIES))
n_count <- 10
topfatality <- arrange(stormsum, desc(FATALITIES), desc(INJURIES))
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(mean_fatality=mean(FATALITIES), total_fatality=sum(FATALITIES), mean_injury=mean(INJURIES), total_injury=sum(INJURIES), mean_damage=mean(TOTALDMGVALUE), total_damage=sum(TOTALDMGVALUE))
topfatality <- arrange(stormsum, desc(total_fatality), desc(mean_fatality))
topfatality <- topfatality[1:n_count,]
print(topfatality)
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(count=nrow(), mean_fatality=mean(FATALITIES), total_fatality=sum(FATALITIES), mean_injury=mean(INJURIES), total_injury=sum(INJURIES), mean_damage=mean(TOTALDMGVALUE), total_damage=sum(TOTALDMGVALUE))
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(count=nrow(EVTYPE), mean_fatality=mean(FATALITIES), total_fatality=sum(FATALITIES), mean_injury=mean(INJURIES), total_injury=sum(INJURIES), mean_damage=mean(TOTALDMGVALUE), total_damage=sum(TOTALDMGVALUE))
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(count=sum(!is.na(EVTYPE)), mean_fatality=mean(FATALITIES), total_fatality=sum(FATALITIES), mean_injury=mean(INJURIES), total_injury=sum(INJURIES), mean_damage=mean(TOTALDMGVALUE), total_damage=sum(TOTALDMGVALUE))
stormsum
topfatality <- arrange(stormsum, desc(total_fatality), desc(mean_fatality))
topfatality <- topfatality[1:n_count,]
print(topfatality)
topinjury <- arrange(stormsum, desc(total_injury), desc(mean_injury))
topinjury <- topinjury[1:n_count,]
print(topinjury)
topfatality.select(topfatality, EVTTPE:total_fatality)
select(topfatality, EVTTPE:total_fatality)
select(topfatality, EVTYPE:total_fatality)
select(topinjury, EVTYPE:count, mean_injury:total_injury)
table(stormdata$EVTYPE)
sort(table(stormdata$EVTYPE))
?sort
sort(table(stormdata$EVTYPE), decreasing=TRUE)
orderedevent <- sort(table(stormdata$EVTYPE), decreasing=TRUE)
class(orderedevent)
sum(orderedevent[1:20]) / sum(orderedevent)
sum(orderedevent[1:10]) / sum(orderedevent)
sum(orderedevent[1:30]) / sum(orderedevent)
sum(orderedevent[1:40]) / sum(orderedevent)
sum(orderedevent[1:20]) / sum(orderedevent)
factor(stormdata$EVTYPE)
unique(stormdata$EVTYPE)
nrow(unique(stormdata$EVTYPE))
count(unique(stormdata$EVTYPE))
dim(unique(stormdata$EVTYPE))
sum(!is.na(unique(stormdata$EVTYPE)))
sum(!is.na(stormdata$EVTYPE))
unique(stormdata$EVTYPE))
unique(stormdata$EVTYPE)
length(unique(stormdata$EVTYPE))
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(count=length(EVTYPE), mean_fatality=mean(FATALITIES), total_fatality=sum(FATALITIES), mean_injury=mean(INJURIES), total_injury=sum(INJURIES), mean_damage=mean(TOTALDMGVALUE), total_damage=sum(TOTALDMGVALUE))
totaldamage <- arrange(stormsum, desc(total_damage), desc(mean_damage))
totaldamage <- totaldamage[1:n_count,]
select(totaldamage, EVTYPE:count, mean_damage:total_damage)
meandamage <- arrange(stormsum, desc(mean_damage), desc(total_damage))
meandamage <- meandamage[1:n_count,]
select(meandamage, EVTYPE:count, mean_damage:total_damage)
topfatality <- arrange(stormsum, desc(total_fatality), desc(mean_fatality))
topfatality <- topfatality[1:n_count,]
select(topfatality, EVTYPE:total_fatality)
topinjury <- arrange(stormsum, desc(total_injury), desc(mean_injury))
topinjury <- topinjury[1:n_count,]
select(topinjury, EVTYPE:count, mean_injury:total_injury)
stormsum <- mutate(stormsum, total_casualty=total_fatalities * 10 + total_injury, mean_casualty=total_casualty/count)
stormsum
stormsum <- mutate(stormsum, total_casualty=total_fatality * 10 + total_injury, mean_casualty=total_casualty/count)
stormsum
topcasualty <- arrange(stormsum, desc(total_casualty), desc(mean_casualty))
topcasualty <- topfatality[1:n_count,]
totaldamage <- arrange(stormsum, desc(total_damage), desc(mean_damage))
totaldamage <- totaldamage[1:n_count,]
toptotal <- rbind(topcasualty, totaldamage) %>%
select(EVTYPE, count, total_casualty, total_damage) %>%
unique %>%
print
topcasualty <- arrange(stormsum, desc(total_casualty), desc(mean_casualty))
topcasualty <- topfatality[1:n_count,]
totaldamage <- arrange(stormsum, desc(total_damage), desc(mean_damage))
totaldamage <- totaldamage[1:n_count,]
topcasualty
stormsum <- mutate(stormsum, total_casualty=total_fatality * 10 + total_injury, mean_casualty=total_casualty/count)
stormsum
topcasualty <- arrange(stormsum, desc(total_casualty), desc(mean_casualty))
topcasualty <- topfatality[1:n_count,]
topcasualty
stormsum
names(topcasualty)
topcasualty <- arrange(stormsum, desc(total_casualty), desc(mean_casualty))
names(topcasualty)
topcasualty <- topcasualty[1:n_count,]
totaldamage <- arrange(stormsum, desc(total_damage), desc(mean_damage))
totaldamage <- totaldamage[1:n_count,]
names(totaldamage)
toptotal <- rbind(topcasualty, totaldamage) %>%
select(EVTYPE, count, total_casualty, total_damage) %>%
unique %>%
print
meancasualty <- arrange(stormsum, desc(mean_casualty), desc(total_casualty))
meancasualty <- meancasualty[1:n_count,]
meandamage <- arrange(stormsum, desc(mean_damage), desc(total_damage))
meandamage <- meandamage[1:n_count,]
topmean <- rbind(meancasualty, meandamage) %>%
select(EVTYPE, count, mean_casualty, mean_damage) %>%
unique %>%
print
stormsum_countabove10 <- filter(stormsum, count>=10)
topcasualty <- arrange(stormsum_countabove10, desc(total_casualty), desc(mean_casualty))
topcasualty <- topcasualty[1:n_count,]
totaldamage <- arrange(stormsum_countabove10, desc(total_damage), desc(mean_damage))
totaldamage <- totaldamage[1:n_count,]
toptotal <- rbind(topcasualty, totaldamage) %>%
select(EVTYPE, count, total_casualty, total_damage) %>%
unique %>%
print
meancasualty <- arrange(stormsum_countabove10, desc(mean_casualty), desc(total_casualty))
meancasualty <- meancasualty[1:n_count,]
meandamage <- arrange(stormsum_countabove10, desc(mean_damage), desc(total_damage))
meandamage <- meandamage[1:n_count,]
topmean <- rbind(meancasualty, meandamage) %>%
select(EVTYPE, count, mean_casualty, mean_damage) %>%
unique %>%
print
?qplot
library(ggplot2)
?qplot
?facet_wrap
?ggplot
qplot(total_casualty, total_damage, data=toptotal, main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)")
qplot(total_casualty, total_damage, data=toptotal, main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color="red")
qplot(total_casualty, total_damage, data=toptotal, main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color="red", size=3)
qplot(total_casualty, total_damage, data=toptotal, main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color='red', size=3)
qplot(data=toptotal, aes(x=total_casualty, y=total_damage), main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)") + geom_point() + geom_pont(data=topmean, aes(x=mean_casualty, y=mean_damage), colour='red', size=3)
qplot(data=toptotal, aes(x=total_casualty, y=total_damage), main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)") + geom_point() + geom_point(data=topmean, aes(x=mean_casualty, y=mean_damage), colour='red', size=3)
theme_set(theme_bw())
qplot(total_casualty, total_damage, data=toptotal, main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color='red', size=3)
qplot(total_casualty, total_damage, data=toptotal, main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color='red', size=3, shape=cut)
qplot(total_casualty, total_damage, data=toptotal, main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color='red', size=3)
qplot(total_casualty, total_damage, data=toptotal, geom="jitter", main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color='red', size=3)
qplot(total_casualty, total_damage, data=toptotal, main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color='red', size=3)
qplot(total_casualty, total_damage, data=toptotal, geom="jitter", main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color='red', size=3)
qplot(mean_casualty, mean_damage, data=topmean, geom="jitter", main="Average Casualties versus Damage of Major Weather Events", xlab="Mean Casualties", ylab="Mean Damage (US$)", color='yellow', size=3)
qplot(data=toptotal, geom="jitter", aes(x=total_casualty, y=total_damage, color=factor(EVTYPE)), main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)") + geom_point()
qplot(data=toptotal, geom="jitter", aes(x=total_casualty, y=total_damage, color=factor(EVTYPE)), main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)")
qplot(data=toptotal, aes(x=total_casualty, y=total_damage, color=factor(EVTYPE)), main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)") + geom_point()
qplot(total_casualty, total_damage, data=toptotal, geom="jitter", main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color=factor(EVTYPE), size=3)
qplot(mean_casualty, mean_damage, data=topmean, geom="jitter", main="Average Casualties versus Damage of Major Weather Events", xlab="Mean Casualties", ylab="Mean Damage (US$)", color=factor(EVTYPE), size=3)
qplot(total_casualty, total_damage, data=toptotal, geom="jitter", main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color=factor(EVTYPE), size=3) +
qplot(mean_casualty, mean_damage, data=topmean, geom="jitter", main="Average Casualties versus Damage of Major Weather Events", xlab="Mean Casualties", ylab="Mean Damage (US$)", color=factor(EVTYPE), size=3)
qplot(total_casualty, total_damage, data=toptotal, geom="jitter", main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color=factor(EVTYPE), size=3);
qplot(mean_casualty, mean_damage, data=topmean, geom="jitter", main="Average Casualties versus Damage of Major Weather Events", xlab="Mean Casualties", ylab="Mean Damage (US$)", color=factor(EVTYPE), size=3)
qplot(total_casualty, total_damage, data=toptotal, geom="jitter", main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color=factor(EVTYPE), size=3, label=EVTYPE)
qplot(mean_casualty, mean_damage, data=topmean, geom="jitter", main="Average Casualties versus Damage of Major Weather Events", xlab="Mean Casualties", ylab="Mean Damage (US$)", color=factor(EVTYPE), size=5)
qplot(total_casualty, total_damage, data=toptotal, geom="jitter", main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color=factor(EVTYPE), size=3, label=EVTYPE)
qplot(mean_casualty, mean_damage, data=topmean, geom="jitter", main="Average Casualties versus Damage of Major Weather Events", xlab="Mean Casualties", ylab="Mean Damage (US$)", color=factor(EVTYPE), size=5)
qplot(total_casualty, total_damage, data=toptotal, geom="jitter", main="Overall Casualties versus Damage of Major Weather Events", xlab="Overall Casualties", ylab="Overall Damage (US$)", color=factor(EVTYPE), size=3)
meandamage <- meandamage[1:n_count,]
topmean <- rbind(meancasualty, meandamage) %>%
select(EVTYPE, count, mean_casualty, mean_damage) %>%
unique %>%
print
topfatality <- arrange(stormsum, desc(total_fatality), desc(mean_fatality))
topfatality <- topfatality[1:n_count,]
select(topfatality, EVTYPE:total_fatality)
topfatality
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(count=length(EVTYPE), mean_fatality=mean(FATALITIES), total_fatality=sum(FATALITIES), mean_injury=mean(INJURIES), total_injury=sum(INJURIES), mean_damage=mean(TOTALDMGVALUE), total_damage=sum(TOTALDMGVALUE))
names(stormsum)
topfatality <- arrange(stormsum, desc(total_fatality), desc(mean_fatality))
topfatality <- topfatality[1:n_count,]
select(topfatality, EVTYPE:total_fatality)
topinjury <- arrange(stormsum, desc(total_injury), desc(mean_injury))
topinjury <- topinjury[1:n_count,]
select(topinjury, EVTYPE:count, mean_injury:total_injury)
rm(list=ls())
?filter
?arrange
library(dplyr)
library(plyr)
library(lubridate)
library(ggplot2)
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destfn <- "StormData.csv"
if (!file.exists(destfn)) {
## Download the data file
download.file(fileURL, destfile=destfn)
}
data.raw <- read.csv(destfn, stringsAsFactors=FALSE, strip.white=TRUE, blank.lines.skip=TRUE)
dim(data.raw)
names(data.raw)
str(data.raw)
stormdata <- tbl_df(data.raw)
stormdata <- select(stormdata, STATE, BGN_DATE, BGN_TIME, EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP, WFO)
stormdata
stormdata <- filter(stormdata, FATALITIES!=0 | INJURIES!=0 | PROPDMG!=0 | CROPDMG!=0)
nrow(stormdata)
tmpdata <- stormdata[!(stormdata$PROPDMGEXP %in% c("K", "M", "B"))  & stormdata$PROPDMG > 0,]
errcount <- nrow(tmpdata)
factor(tmpdata$PROPDMGEXP)
exp_KMB <- c("k"="K", "m"="M", "b"="B")
stormdata$PROPDMGEXP <- revalue(stormdata$PROPDMGEXP, exp_KMB, warn_missing=FALSE)
stormdata$PROPDMGEXP[!(stormdata$PROPDMGEXP %in% c("K", "M", "B")) & stormdata$PROPDMG > 0] <- "K"
stormdata$CROPDMGEXP <- revalue(stormdata$CROPDMGEXP, exp_KMB, warn_missing=FALSE)
stormdata$CROPDMGEXP[!(stormdata$CROPDMGEXP %in% c("K", "M", "B")) & stormdata$CROPDMG > 0] <- "K"
stormdata$EVTYPE <- toupper(stormdata$EVTYPE)
stormdata$EVTYPE <- gsub("([ ])", "", stormdata$EVTYPE)
stormdata$EVTYPE[grep("(THUNDERSTORM)", stormdata$EVTYPE)] <- "THUNDERSTORM"
stormdata$EVTYPE[grep("(TSTM)", stormdata$EVTYPE)] <- "THUNDERSTORM"
stormdata$EVTYPE[grep("(TORNADO)", stormdata$EVTYPE)] <- "TORNADO"
stormdata$EVTYPE[grep("(COLD|WINDCHILL)", stormdata$EVTYPE)] <- "COLD/WINDCHILL"
stormdata$EVTYPE[grep("(DROUGHT)", stormdata$EVTYPE)] <- "DROUGHT"
stormdata$EVTYPE[grep("(FLASH).*(FLOOD)", stormdata$EVTYPE)] <- "FLASH/FLOOD"
stormdata$EVTYPE[grep("(FLOOD).*(FLASH)", stormdata$EVTYPE)] <- "FLASH/FLOOD"
stormdata$EVTYPE[grep("(FLOOD)[^(FLASH)]", stormdata$EVTYPE)] <- "FLOOD"
stormdata$EVTYPE[grep("(FROST|FREEZE)", stormdata$EVTYPE)] <- "FROST/FREEZE"
stormdata$EVTYPE[grep("(HEAT)", stormdata$EVTYPE)] <- "HEAT"
stormdata$EVTYPE[grep("(RAIN)", stormdata$EVTYPE)] <- "HEAVYRAIN"
stormdata$EVTYPE[grep("(SNOW)", stormdata$EVTYPE)] <- "HEAVYSNOW"
stormdata$EVTYPE[grep("(HURRICANE|TYPHOON)", stormdata$EVTYPE)] <- "HURRICANE/TYPHOON"
stormdata$EVTYPE[grep("(SURGE|TIDE)", stormdata$EVTYPE)] <- "SURGE/TIDE"
stormdata$EVTYPE[grep("(VOLCANIC)", stormdata$EVTYPE)] <- "VOLCANIC"
stormdata$EVTYPE[grep("(FIRE)", stormdata$EVTYPE)] <- "WILDFIRE"
stormdata$EVTYPE[grep("(WINTERWEATHER)", stormdata$EVTYPE)] <- "WINTERWEATHER"
stormdata$EVTYPE[grep("(WINTERSTORM)", stormdata$EVTYPE)] <- "WINTERSTORM"
stormdata$EVTYPE[grep("(HAIL)", stormdata$EVTYPE)] <- "HAIL"
stormdata$EVTYPE[grep("(SURF)", stormdata$EVTYPE)] <- "HIGHSURF"
stormdata$EVTYPE[grep("(WATERSPOUT)", stormdata$EVTYPE)] <- "WATERSPOUT"
stormdata$EVTYPE[grep("(STREAMFLOOD)", stormdata$EVTYPE)] <- "FLOOD"
stormdata$EVTYPE[grep("(URBANFLOOD)", stormdata$EVTYPE)] <- "FLOOD"
stormdata$EVTYPE[grep("(RIVERFLOOD)", stormdata$EVTYPE)] <- "FLOOD"
stormdata$EVTYPE[grep("(SMLSTREAMFLD)", stormdata$EVTYPE)] <- "FLOOD"
stormdata$EVTYPE[grep("(URBAN).*(SMALL)", stormdata$EVTYPE)] <- "FLOOD"
stormdata$EVTYPE[grep("(STRONGWIND)", stormdata$EVTYPE)] <- "STRONGWIND"
stormdata$EVTYPE[grep("(HIGHWIND)", stormdata$EVTYPE)] <- "HIGHWIND"
# Check the number of event type
numEvent <- length(unique(stormdata$EVTYPE))
table(grep("^WIND", stormdata$EVTYPE, value=TRUE))
orderedevent <- sort(table(stormdata$EVTYPE), decreasing=TRUE)
sum(orderedevent[1:30]) / sum(orderedevent)
value_KMB <- c("K"=1e+3, "M"=1e+6, "B"=1e+9)
## Convert to numeric
stormdata$PROPDMGEXP <- as.numeric(revalue(stormdata$PROPDMGEXP, value_KMB, warn_missing=FALSE))
stormdata$CROPDMGEXP <- as.numeric(revalue(stormdata$CROPDMGEXP, value_KMB, warn_missing=FALSE))
## Calculate damage value
stormdata <- mutate(stormdata, PROPDMGVALUE=PROPDMG*PROPDMGEXP)
stormdata <- mutate(stormdata, CROPDMGVALUE=CROPDMG*CROPDMGEXP)
stormdata$PROPDMGVALUE[is.na(stormdata$PROPDMGVALUE)] <- 0
stormdata$CROPDMGVALUE[is.na(stormdata$CROPDMGVALUE)] <- 0
stormdata <- mutate(stormdata, TOTALDMGVALUE=PROPDMGVALUE+CROPDMGVALUE)
stormsum <- group_by(stormdata, EVTYPE) %>%
summarize(count=length(EVTYPE), mean_fatality=mean(FATALITIES), total_fatality=sum(FATALITIES), mean_injury=mean(INJURIES), total_injury=sum(INJURIES), mean_damage=mean(TOTALDMGVALUE), total_damage=sum(TOTALDMGVALUE))
stormsum
n_count <- 10
library(dplyr)
topfatality <- arrange(stormsum, desc(total_fatality), desc(mean_fatality))
topfatality <- topfatality[1:n_count,]
#topfatality <- filter(topfatality, c(1:n_count))
select(topfatality, EVTYPE:total_fatality)
topinjury <- arrange(stormsum, desc(total_injury), desc(mean_injury))
#topinjury <- topinjury[1:n_count,]
topinjury <- filter(topinjury, c(1:n_count))
select(topinjury, EVTYPE:count, mean_injury:total_injury)
topinjury <- arrange(stormsum, desc(total_injury), desc(mean_injury))
topinjury <- topinjury[1:n_count,]
#topinjury <- filter(topinjury, c(1:n_count))
select(topinjury, EVTYPE:count, mean_injury:total_injury)
